#+TITLE: SPPARKS for microstructural science
#+AUTHOR: Brian DeCost
#+EMAIL: bdecost@andrew.cmu.edu
#+DATE: 11 July 2014
#+OPTIONS: H:3 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS: TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+startup: beamer
#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [mathserif,xcolor=dvipsnames]
#+BEAMER_FRAME_LEVEL: 2
#+latex_header: \mode<beamer>{\usetheme{Berkeley}}
#+latex_header: \mode<beamer>{\usecolortheme{seahorse}}
#+latex_header: \setbeamertemplate{navigation symbols}{}
#+latex_header: \setbeamertemplate{footline}[frame number]
#+latex_header: \setbeamertemplate{blocks}[rounded] 
#+latex_header: \usepackage{enumitem}
#+latex_header: \setitemize{itemsep=1ex,leftmargin=1cm,labelindent=\parindent,label=$\triangleright$}
#+latex_header: \graphicspath{{images/}}
#+latex_header: \setbeamerfont{title}{family=\rm}
#+latex_header: \setbeamerfont{author}{family=\rm}
#+latex_header: \setbeamerfont{date}{family=\rm}
#+latex_header: \setbeamerfont{frametitle}{family=\rm}
# #+latex_header: \usebackgroundtemplate{\includegraphics[width=\paperwidth]{spkcode-1}}
#+latex_header: \setbeamertemplate{background canvas}{ \begin{picture}(0,0) \put(45,-301){\includegraphics[width=\paperwidth]{spkcode-1}} \end{picture}}
#+BEAMER_HEADER_EXTRA: \title[SPPARKS]{SPPARKS for microstructural science}
#+BEAMER_HEADER_EXTRA: \author[]{Brian DeCost}
#+latex_header: \newcommand{\e}[1]{\textcolor{Periwinkle}{#1}}
#+latex_header: \definecolor{links}{HTML}{2A1B81}
#+latex_header: \hypersetup{colorlinks,linkcolor=,urlcolor=links}

* Introduction to =SPPARKS=
\setbeamertemplate{background canvas}[default] 
** \e{S}tochastic \e{P}arallel \e{PAR}ticle \e{K}inetic \e{S}imulator[fn:1]
*** ~SPPARKS~ is an efficient \emph{parallel} Kinetic Monte Carlo framework :B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :END:
    - Mesoscale materials phenomena as stochastic processes
    - Scalable to thousands of processors
    - Modular ~C++~ facilitates user-defined models/statistics
    - Open Source (GPLv2)
    - Related to the ~LAMMPS~ Molecular Dynamics framework

** How =SPPARKS= is used
~SPPARKS~ is a command-line application.
Simulations are defined by input scripts composed of [[http://spparks.sandia.gov/doc/Section_commands.html#comm][SPPARKS commands]]

\bigskip

\begin{block}{The most important commands are:}
- app\_style
- ~solve\_style~ / sweep\_style
- diag\_style
\end{block}

** What applications is ~SPPARKS~ useful for?
\begin{block}{lattice-based models}
- Ising model
- Potts model and variants (pin, strain, \emph{aniso})
- Vacancy diffusion models (surface and bulk)
\end{block}

\begin{block}{off-lattice models}
- Atomic relaxation 
\end{block}

\begin{block}{generic KMC applications}
- biochemical reaction network
\end{block}

** In this session, we'll focus on the Potts model
- Modeling grain growth, recrystallization, and related phenomena
- Annealing synthetic microstructures to achieve local equilibrium along triple lines
- Generation of simple synthetic microstructures

** Modeling abnormal grain growth with ~SPPARKS~
\vspace{-4cm}
Variable grain boundary mobility: imaginary red/blue texture components

* Getting started with =SPPARKS=
** The =SPPARKS= distribution
Download [[http://www.sandia.gov/~sjplimp/download.html][SPPARKS]] from =http://www.sandia.gov/~sjplimp/download.html=
\bigskip
\begin{block}{Unpack the ~SPPARKS~ source archive}
#+BEGIN_SRC shell
mkdir -p ~/Software && cd ~/Software
tar xvzf ~/Downloads/spparks.tar.gz
mv spparks-19Nov13 spparks
cd spparks/src
ls ~/Software/spparks/
#+END_SRC
\end{block}
\bigskip

\includegraphics[width=\textwidth]{ls-1}

** =SPPARKS= uses the Unix build system =make=
~SPPARKS~ is distributed with several makefiles, found in ~src/MAKE/~. 

\bigskip
\includegraphics[width=\textwidth]{make-dir-1}
\bigskip

You will likely have to edit ~Makefile.linux~, ~Makefile.g++~, or ~Makefile.mac_mpi~ to reflect your system to get ~SPPARKS~ to compile.[fn:3]

** Building =SPPARKS=

Try to compile =SPPARKS= by running make with the appropriate build target for your system as an argument.[fn:5]

\bigskip
\begin{block}{Building SPPARKS using ~Makefile.demo~}
#+BEGIN_SRC shell
make demo
#+END_SRC
\end{block}
\bigskip

The result is an executable named ~spk_demo~ in ~src/~.

** Building serial ~SPPARKS~
~SPPARKS~ comes with a placeholder ~MPI~ library for building a serial version.
\bigskip
\begin{block}{First build the ~MPI~ stubs:}
#+BEGIN_SRC shell
cd STUBS
make
cd ..
#+END_SRC
\end{block}

\begin{block}{Build the ~demo\_serial~ version of ~SPPARKS~}
#+BEGIN_SRC shell
make demo_serial
#+END_SRC
\end{block}

** "Installing" SPPARKS[fn:2]
\begin{block}
{To avoid copying the ~SPPARKS~ executable or typing the full path to it repeatedly, define a \emph{shell alias}:}
#+BEGIN_SRC shell
alias spk=~/Software/spparks/src/spk_demo_serial
#+END_SRC
\end{block}

\bigskip

Now typing ~spk~ into the shell prompt from any working directory runs ~SPPARKS~. Try this now.

** Running ~SPPARKS~ with no input
\begin{block}{~SPPARKS~ reads commands from ~stdin~}
\includegraphics[width=\textwidth]{spk} \\
Press ~Ctrl-C~ to exit.
\end{block}


* Demo: =SPPARKS= input scripts
** Demo: =SPPARKS= input scripts
=SPPARKS= is controlled by a script of commands which are executed line-by-line.

\bigskip

\begin{block}{Run the ~basic~ demo}
#+BEGIN_SRC shell
cd ~/Downloads/spparks-demo-master/demos/basic
spk < basic.spkin
#+END_SRC
\end{block}

\bigskip

=SPPARKS= will print some diagnostic information to the screen, and to a log file called ~log.spparks~.

** =SPPARKS= output
\includegraphics[width=0.9\textwidth]{basic-1}

** Anatomy of an  input script: =basic.spkin=
#+BEGIN_SRC shell
# Minimal SPPARKS Potts script
seed             56789
app_style        potts 100
dimension        3
lattice          sc/26n 1.0
region           box block 0 32 0 32 0 32
create_box       box
create_sites     box
set              site range 1 100
solve_style      tree
temperature      0.0
diag_style       energy
stats            10.0
run              100.0
#+END_SRC

* Demo: Grain growth kinetics
** Demo: Grain growth kinetics
\begin{block}{Run the ~grain-growth-kinetics~ demo}
#+BEGIN_SRC shell
cd ../grain-growth-kinetics
spk < potts2d.spkin
#+END_SRC
\end{block}
\bigskip
This script uses the ~cluster~ diagnostic, which computes grain size information.

** Grain growth kinetics
This demo includes a ~python~ script which extracts grain growth kinetics from ~log.spparks~ and attempts to plot them.
\bigskip
\begin{block}{Run the ~python~ script}
#+BEGIN_SRC shell
python parse_log.py log.spparks
#+END_SRC
\end{block}
\bigskip

The script produces a file ~cluster-stats.csv~ that you can open in ~Excel~.

** Grain growth kinetics
Grain size (after an initial transient) is linear in ~sqrt~-time!
\includegraphics[width=\textwidth]{kinetics}

* Demo: Visualization with ParaView
** Visualization: the =dump= command
\begin{block}{Run the ~visualization~ demo}
#+BEGIN_SRC shell
cd ../visualization
spk < viz.spkin
#+END_SRC
\end{block}
\bigskip
\begin{block}{~SPPARKS~ has a similar data dump format to ~LAMMPS~}
dump 1.0 text potts.dump
\end{block}
These need to be post-processed =pizza.py= or custom scripts.[fn:6]
** Conversion to =vtk= with =pizza.py=
The python script =pizza_dump2vtk.py= uses tools from the open source [[http://www.sandia.gov/~sjplimp/download.html][pizza.py]] toolkit to create vtk files from the ~SPPARKS~ many-timestep dump file.
\bigskip
\begin{block}{Run ~pizza\_dump2vtk.py~}
#+BEGIN_SRC shell
python pizza_dump2vtk.py potts.dump
#+END_SRC
\end{block}

\bigskip

The ~viz3D.spkin~ script will make a 3D grain growth dataset if you're willing to wait for it.

** Visualizing with ParaView
Open the vtk files in ParaView to create a movie.

\bigskip

\hfill
\includegraphics[width=0.3\textwidth]{init}
\hfill
\includegraphics[width=0.3\textwidth]{mid}
\hfill
\includegraphics[width=0.3\textwidth]{end}
\hfill

* Running =SPPARKS= in parallel
** =mpirun=
Due to the way ~SPPARKS~ is parallelized, parallelized simulations must use the ~sector~ command.
\bigskip
\begin{block}{Run ~SPPARKS~ with ~mpirun~}
mpirun -np 4 spk < viz3D.spkin
\end{block}

** Parallel =KMC= is an approximation
\begin{overprint}
\onslide<1>
\vspace{-0.8cm}
\includegraphics[width=\textwidth]{splinch}
\onslide<2>
\includegraphics[width=\textwidth]{splinch-zoom-1}
\end{overprint}

* Footnotes

[fn:1] [[http://spparks.sandia.gov/]]

[fn:2] To make this persistent, append this command to =~/.bashrc= (=~/.bash_profile= on a mac)

[fn:3] You'll likely need to supply the location of the =MPI= library files on your system.

[fn:4] As with =SPPARKS=, append the =alias= command to =~/.bashrc= or =~/.bash_profile= to make this "installation" persistent.

[fn:5] To use the demo makefiles, first copy =Makefile.demo= and =Makefile.demo_serial= are in the =SPPARKS= =src/MAKE= directory.

[fn:6] pizza.py is a post-processing toolkit for LAMMPS [[http://pizza.sandia.gov/]]

